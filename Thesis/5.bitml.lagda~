%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Formal Model II: BitML Calculus}
\label{sec:bitml}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Now let us shift our focus to our second subject of study, the BitML calculus for modelling smart contracts.
In this subsection we sketch the formalized part of BitML we have covered so far, namely the syntax and small-step
semantics of BitML contracts, as well as an example execution of a contract under these semantics.
All code is publicly available on Github\site{https://github.com/omelkonian/formal-bitml}.

First, we begin with some basic definitions that will be used throughout this section:
\begin{agda}\begin{code}
module Types (Participant : Set) (Honest : List SUPPLUS Participant) where
##
Time : Set
Time = ‚Ñï
##
Value : Set
Value = ‚Ñï
##
record Deposit : Set where
  constructor UL has UR
  field  participant : Participant
         value       : Value
##
Secret : Set
Secret = String
##
data Arith : List Secret ‚Üí Set where DOTS
‚Ñï‚ü¶ U ‚üß : ‚àÄ {s} ‚Üí Arith s ‚Üí ‚Ñï
‚Ñï‚ü¶ U ‚üß = DOTS
##
data Predicate : List Secret ‚Üí Set where DOTS
ùîπ‚ü¶ U ‚üß : ‚àÄ {s} ‚Üí Predicate s ‚Üí Bool
ùîπ‚ü¶ U ‚üß = DOTS
\end{code}\end{agda}
Instead of giving a fixed datatype of participants, we parametrise our module with a given \textit{universe} of participants
and a non-empty list of honest participants.
Representation of time and monetary values is again done using natural numbers,
while we model participant secrets as simple strings\footnote{
Of course, one could provide more realistic types (e.g. words of specific length)
to be closer to the implementation, as shown for the UTxO model in Section~\ref{subsec:eutxo}.
}.
A deposits consists of the participant that owns it and the number of bitcoins it carries.
We, furthermore, introduce a simplistic language of logical predicates and arithmetic expressions with the usual constructs (e.g. numerical addition, logical conjunction) and give the usual semantics (predicates on booleans and arithmetic on naturals).
A more unusual feature of these expressions is the ability to calculate length of secrets (within arithmetic expressions)
and, in order to ensure more type safety later on, all expressions are indexed by the secrets they internally use.

\subsection{Contracts in BitML}
A \textit{contract advertisement} consists of a set of \textit{preconditions},
which require some resources from the involved participants prior to the contract's execution,
and a \textit{contract}, which specifies the rules according to which bitcoins are transferred between participants.

Preconditions either require participants to have a deposit of a certain value on their name (volatile or not) or
commit to a certain secret. Notice the index of the datatype below, which captures the values of all required deposits:
\begin{agda}\begin{code}
data Precondition : List Value ‚Üí Set where
  -- volatile deposit
  U ? U : Participant ‚Üí (v : Value) ‚Üí Precondition [ v ]
  -- persistent deposit
  U ! U : Participant ‚Üí (v : Value) ‚Üí Precondition [ v ]
  -- committed secret
  UL ‚ôØ UR : Participant ‚Üí Secret ‚Üí Precondition []
  -- conjunction
  U ‚àß U : Precondition vs SUBL ‚Üí Precondition vs SUBR ‚Üí Precondition (vs SUBL ++ vs SUBR)
\end{code}\end{agda}

Moving on to actual contracts, we define them by means of a collection of five types of commands;
|put| injects participant deposits and revealed secrets in the remaining contract,
|withdraw| transfers the current funds to a participant,
|split| distributes the current funds across different individual contracts,
|U : U| requires the authorization from a participant to proceed
and |after U : U| allows further execution of the contract only after some time has passed.
\begin{agda}\begin{code}
data Contract  :  Value   -- the monetary value it carries
               ‚Üí  Values  -- the deposits it presumes
               ‚Üí  Set where
  -- collect deposits and secrets
  put U reveal U if U ‚áí U ‚à∂- U :
    (vs : List Value) ‚Üí (s : Secrets) ‚Üí Predicate s‚Ä≤  ‚Üí Contract (v + sum vs) vs‚Ä≤ ‚Üí  s‚Ä≤ ‚äÜ s
    ‚Üí Contract v (vs‚Ä≤ ++ vs)
  -- transfer the remaining balance to a participant
  withdraw : ‚àÄ {v} ‚Üí Participant ‚Üí Contract v []
  -- split the balance across different branches
  split :  (cs : List (‚àÉ[ v ] ^^ ‚àÉ[ vs ] ^^ Contract v vs))
        ‚Üí  Contract (sum (proj‚ÇÅ <$$> cs)) (concat (proj‚ÇÇ <$$> cs))
  -- wait for participant's authorization
  U : U : Participant ‚Üí Contract v vs ‚Üí Contract v vs
  -- wait until some time passes
  after U : U : Time ‚Üí Contract v vs ‚Üí Contract v vs
\end{code}\end{agda}
There is a lot of type-level manipulation across all constructors, since we need to make sure that indices are
calculated properly. For instance, the total value in a contract constructed by the |split| command is the
sum of the values carried by each branch.
The |put| command\footnote{
|put| comprises of several components and we will omit those that do not contain any helpful information,
e.g. write |put U ‚áí U| when there are no revealed secrets and the predicate trivially holds.
} additionally requires an explicit proof that the predicate
of the |if| part only uses secrets revealed by the same command.

We also introduce an intuitive syntax for declaring the different branches of a |split| command, emphasizing the
\textit{linear} nature of the contract's total monetary value:
\begin{agda}\begin{code}
UL ‚ä∏ UR : ‚àÄ {vs : Values} ‚Üí (v : Value) ‚Üí Contract v vs ‚Üí ‚àÉ[ v ] ^^ ‚àÉ[ vs ] ^^ Contract v vs
UL ‚ä∏ UR {vs} v c = v , vs , c
\end{code}\end{agda}

Having defined both preconditions and contracts, we arrive at the definition of a contract advertisement:
\begin{agda}\begin{code}
record Advertisement (v : Value) (vs SUPC vs SUPG : List Value) : Set where
  constructor U ‚ü® U ‚ü©‚à∂- U
  field  G      :  Precondition vs
         C      :  Contracts v vs
         valid  :  length vs SUPC ‚â§ length vs SUPG
                √ó  participants SUPG G ++ participants SUPC C ‚äÜ (participant <$$> persistentDeposits SUPP G)
\end{code}\end{agda}
Notice that in order to construct an advertisement, one has to also provide proof of the contract's validity with respect to
the given preconditions, namely that all deposit references in the contract are declared in the precondition
and each involved participant is required to have a persistent deposit.

To clarify things so far, let us see a simple example of a contract advertisement:
\begin{agda}\begin{code}
open BitML (A | B) [ A ] SUPPLUS

ex-ad : Advertisement 5 [ 200 ] (200 ‚à∑ 100 ‚à∑ [])
ex-ad =  ‚ü®  B ! 200 ‚àß A ! 100 ^^ ‚ü©
          split  (  2 ‚ä∏ withdraw B
                 ‚äï  2 ‚ä∏ after 100 ‚à∂ withdraw A
                 ‚äï  1 ‚ä∏ put [ 200 ] ‚áí B ‚à∂ withdraw {201} A ‚à∂- DOTS
                 )
          ‚à∂- DOTS
\end{code}\end{agda}
We first need to open our module with a fixed set of participants (in this case |A| and |B|).
We then define an advertisement, whose type already says a lot about what is going on;
it carries \bitcoin ~5, presumes the existence of at least one deposit of \bitcoin ~200, and requires two deposits
of \bitcoin ~200 and \bitcoin ~100.

Looking at the precondition itself, we see that the required deposits will be provided by |B| and |A|, respectively.
The contract first splits the bitcoins across three branches:
the first one gives \bitcoin ~2 to |B|, the second one gives \bitcoin ~2 to |A| after some time period,
while the third one retrieves |B|'s deposit of \bitcoin ~200 and allows |B| to authorise the
withdrawal of the remaining funds (currently \bitcoin ~201) from |A|.

We have omitted the proofs that ascertain the well-formedness of the |put| command and the advertisement, as
they are straightforward and do not provide any more intuition\footnote{
In fact, we have defined decidable procedures for all such proofs using the
\textit{proof-by-reflection} pattern~\cite{proofbyreflection}.
These automatically discharge all proof obligations, when there are no variables involved.}.

\subsection{Small-step Semantics}
BitML is a \textit{process calculus}, which is geared specifically towards smart contracts.
Contrary to most process calculi that provide primitive operators for inter-process communication via
message-passing~\cite{csp}, the BitML calculus does not provide such built-in features.

It, instead, provides domain-specific synchronization mechanisms through its \textit{small-step} reduction semantics.
These essentially define a \textit{labelled transition system} between \textit{configurations}, where
\textit{action} labels are emitted on every transition and represent the required actions of the participants.
This symbolic model consists of two layers; the bottom one transitioning between \textit{untimed} configurations and the top one
that works on \textit{timed} configurations.

We start with the datatype of actions, which showcases the principal actions required to satisfy an advertisement's preconditions
and an action to pick one branch of a collection of contracts (introduced by the choice operator |‚äï|).
We have omitted uninteresting actions concerning the manipulation of deposits, such as dividing, joining, donating and destroying them.
Since we will often need versions of the types of advertisements/contracts with their
indices existentially quantified, we first provide aliases for them.
\begin{agda}\begin{code}
AdvertisedContracts : Set
AdvertisedContracts = List (‚àÉ[ v ] ^^ ‚àÉ[ vs SUPC ] ^^ ‚àÉ[ vs SUPG ] ^^ Advertisement v vs SUPC vs SUPG)
##
ActiveContracts : Set
ActiveContracts = List (‚àÉ[ v ] ^^ ‚àÉ[ vs ] ^^ List (Contract v vs))
##
data Action (p : Participant)  -- the participant that authorises this action
  :  AdvertisedContracts       -- the contract advertisments it requires
  ‚Üí  ActiveContracts           -- the active contracts it requires
  ‚Üí  Values                    -- the deposits it requires from this participant
  ‚Üí  List Deposit              -- the deposits it produces
  ‚Üí  Set where
##
  -- commit secrets to stipulate an advertisement
  HTRI UR  :  (ad : Advertisement v vs SUPC vs SUPG)
               ‚Üí  Action p [ v , vs SUPC , vs SUPG , ad ] [] [] []

  -- spend x to stipulate an advertisement
  U STRI UR  :  (ad : Advertisement v vs SUPC vs SUPG)
                     ‚Üí  (i : Index vs SUPG)
                     ‚Üí  Action p [ v , vs SUPC , vs SUPG , ad ] [] [ vs SUPG ‚Äº i ] []

  -- pick a branch
  U BTRI UR  :  (c : List (Contract v vs))
                     ‚Üí  (i : Index c)
                     ‚Üí  Action p [] [ v , vs , c ] [] []

  VDOTS
\end{code}\end{agda}
The action datatype is parametrised\footnote{
In Agda, datatype parameters are similar to indices, but are not allowed to vary across constructors.
}
over the participant who performs it
and includes several indices representing the prerequisites the current configuration has to satisfy, in order for
the action to be considered valid (e.g. one cannot spend a deposit to stipulate an advertisement that does not exist).

The first index refers to advertisements that appear in the current configuration, the second to contracts that have
already been stipulated, the third to deposits owned by the participant currently performing the action and the fourth
declares new deposits that will be created by the action
(e.g. dividing a deposit would require a single deposit as the third index and produce two other deposits in its fourth index).

Although our indexing scheme might seem a bit heavyweight now, it makes many little details and assumptions explicit,
which would bite us later on when we will need to reason about them.

Continuing from our previous example advertisement, let's see an example action where |A| spends the required \bitcoin ~100
to stipulate the example contract\footnote{
Notice that we have to make all indices of the advertisement explicit in the second index in the action's type signature.
}:
\begin{agda}\begin{code}
ex-spend : Action A [ 5 , [ 200 ] , 200 ‚à∑ 100 ‚à∑ [] , ex-ad ] [] [ 100 ] []
ex-spend = ex-ad STRI 1
\end{code}\end{agda}

Configurations are now built from advertisements, active contracts, deposits, action authorizations and committed/revealed secrets:
\begin{agda}\begin{code}
data Configuration‚Ä≤  :  -- $\hspace{22pt}$ current $\hspace{20pt}$ $\times$ $\hspace{15pt}$ required
                        AdvertisedContracts  √ó AdvertisedContracts
                     ‚Üí  ActiveContracts      √ó ActiveContracts
                     ‚Üí  List Deposit         √ó List Deposit
                     ‚Üí  Set where

  -- empty
  ‚àÖ : Configuration‚Ä≤ ([] , []) ([] , []) ([] , [])

  -- contract advertisement
  ` U  :  (ad : Advertisement v vs SUPC vs SUPG)
           ‚Üí  Configuration‚Ä≤ ([ v , vs SUPC , vs SUPG , ad ] , []) ([] , []) ([] , [])

  -- active contract
  ‚ü® U , U ‚ü© SUPCC  :  (c : List (Contract v vs)) ‚Üí Value
                           ‚Üí  Configuration‚Ä≤ ([] , []) ([ v , vs , c ] , []) ([] , [])

  -- deposit redeemable by a participant
  ‚ü® UR , U ‚ü© SUPD  :  (p : Participant) ‚Üí (v : Value)
                           ‚Üí  Configuration‚Ä≤ ([] , []) ([] , []) ([ p has v ] , [])

  -- authorization to perform an action
  UL [ U ]  : (p : Participant) ‚Üí Action p ads cs vs ds
                    ‚Üí Configuration‚Ä≤ ([] , ads) ([] , cs) (ds , ((p has U) <$$> vs))

  -- committed secret
  ‚ü® U ‚à∂ U ‚ôØ U ‚ü©  :  Participant ‚Üí  Secret ‚Üí  ‚Ñï ‚äé ‚ä•
                             ‚Üí  Configuration‚Ä≤ ([] , []) ([] , []) ([] , [])
  -- revealed secret
  U ‚à∂ U ‚ôØ U  :  Participant ‚Üí  Secret ‚Üí ‚Ñï
                         ‚Üí  Configuration‚Ä≤ ([] , []) ([] , []) ([] , [])

  -- parallel composition
  U | U  :  Configuration‚Ä≤ (ads SUPL , rads SUPL) (cs SUPL , rcs SUPL) (ds SUPL , rds SUPL)
                 ‚Üí  Configuration‚Ä≤ (ads SUPR , rads SUPR) (cs SUPR , rcs SUPR) (ds SUPR , rds SUPR)
                 ‚Üí  Configuration‚Ä≤  (ads SUPL                    ++ ads SUPR  , rads SUPL  ++ (rads SUPR  ‚àñ ads SUPL))
                                    (cs SUPL                     ++ cs SUPR   , rcs SUPL   ++ (rcs SUPR   ‚àñ cs SUPL))
                                    ((ds SUPL ‚àñ rds SUPR)        ++ ds SUPR   , rds SUPL   ++ (rds SUPR   ‚àñ ds SUPL))
\end{code}\end{agda}
The indices are quite involved, since we need to record both the current advertisements, stipulated contracts and deposits
and the required ones for the configuration to become valid. The most interesting case is the parallel composition
operator, where the resources provided by the left operand might satisfy some requirements of the right operand. Moreover,
consumed deposits have to be eliminated as there can be no double spending, while the number of advertisements and contracts
always grows.

By composing configurations together, we will eventually end up in a \textit{closed} configuration, where
all required indices are empty (i.e. the configuration is self-contained):
\begin{agda}\begin{code}
Configuration : AdvertisedContracts ‚Üí ActiveContracts ‚Üí List Deposit ‚Üí Set
Configuration ads cs ds = Configuration‚Ä≤ (ads , []) (cs , []) (ds , [])
\end{code}\end{agda}

We are now ready to declare the inference rules of the bottom layer of our small-step semantics,
by defining an inductive datatype modelling the binary step relation between untimed configurations:
\begin{agda}\begin{code}
data U ‚Äî‚Üí U : Configuration ads cs ds ‚Üí Configuration ads‚Ä≤ cs‚Ä≤ ds‚Ä≤ ‚Üí Set where
  DEP-AuthJoin :
    ‚ü® A , v ‚ü© SUPD | ‚ü® A , v‚Ä≤ ‚ü© SUPD | Œì ‚Äî‚Üí ‚ü® A , v ‚ü© SUPD | ‚ü® A , v‚Ä≤ ‚ü© SUPD | A [ 0 ‚Üî 1 ] | Œì
##
  DEP-Join :
    ‚ü® A , v ‚ü© SUPD | ‚ü® A , v‚Ä≤ ‚ü© SUPD | A [ 0 ‚Üî 1 ] | Œì ‚Äî‚Üí ‚ü® A , v + v‚Ä≤ ‚ü© SUPD | Œì
##
  C-Advertise : ‚àÄ {Œì ad}
    ‚Üí  ‚àÉ[ p ‚àà participants SUPG (G ad) ] p ‚àà Hon
       {- $\inferLarge$ -}
    ‚Üí  Œì ‚Äî‚Üí ` ad | Œì
##
  C-AuthCommit : ‚àÄ {A ad Œì}
    ‚Üí  secrets (G ad) ‚â° a‚ÇÄ DOTS a‚Çô
    ‚Üí  (A ‚àà Hon ‚Üí ‚àÄ[ i ‚àà 0 DOTS n ] a SUBI ‚â¢ ‚ä•)
       {- $\inferLarge$ -}
    ‚Üí  ` ad | Œì ‚Äî‚Üí ` ad | Œì | DOTS ‚ü® A : a SUBI ‚ôØ N SUBI ‚ü© DOTS ^^ BAR ^^ A [ ‚ôØ‚ñ∑ ^^ ad ]
##
  C-Control : ‚àÄ {Œì C i D}
    ‚Üí  C ‚Äº i ‚â° A‚ÇÅ : A‚ÇÇ : DOTS : A‚Çô : D
       {- $\inferLarge$ -}
    ‚Üí  ‚ü® C , v ‚ü© SUPCC | DOTS A SUBI [ C BTRI i ] DOTS | Œì ‚Äî‚Üí ‚ü® D , v ‚ü© SUPCC | Œì
  VDOTS
\end{code}\end{agda}
There is a total of 18 rules we need to define, but we choose to depict only a representative subset of them.
The first pair of rules initially appends the authorisation to merge
two deposits to the current configuration (rule |DEP-AuthJoin|) and then performs the actual join (rule |[DEP-Join]|).
This is a common pattern across all rules, where we first collect authorisations for an action by all involved participants,
and then we fire a subsequent rule to perform this action.
|[C-Advertise]| advertises a new contract, mandating that at least one of the participants involved in the pre-condition
is honest and requiring that all deposits needed for stipulation are available in the surrounding context.
|[C-AuthCommit]| allows participants to commit to the secrets required by the contract's pre-condition, but only dishonest
ones can commit to the invalid length $\bot$.
Lastly, |[C-Control]| allows participants to give their authorization required by a particular branch out of the current
choices present in the contract, discarding any time constraints along the way.

It is noteworthy to mention that during the transcriptions of the complete set of rules from the paper~\cite{bitml}
to our dependently-typed setting,
we discovered a discrepancy in the |[C-AuthRev]| rule, namely that there was no context $\Gamma$.
Moreover, in order to later facilitate equational reasoning, we re-factored the |[C-Control]|
to not contain the inner step as a hypothesis, but instead immediately inject it in the result operand of the step relation.

The inference rules above have elided any treatment of timely constraints;
this is handled by the top layer, whose states are now timed configurations.
The only interesting inference rule is the one that handles time decorations of the form |after U : U|,
since all other cases are dispatched to the bottom layer (which just ignores timely aspects).
\begin{agda}\begin{code}
record Configuration SUPT (ads : AdvertisedContracts) (cs  : ActiveContracts) (ds  : Deposits) : Set where
  constructor U at U
  field  cfg   : Configuration ads cs ds
         time  : Time
##
data U ‚Äî‚Üí SUBT U : Configuration SUPT ads cs ds ‚Üí Configuration SUPT ads‚Ä≤ cs‚Ä≤ ds‚Ä≤ ‚Üí Set where

  Action : ‚àÄ {Œì Œì‚Ä≤ t}
    ‚Üí  Œì ‚Äî‚Üí Œì‚Ä≤
       {- $\inferSmall$ -}
    ‚Üí  Œì at t ‚Äî‚Üí SUBT Œì‚Ä≤ at t

  Delay : ‚àÄ {Œì t Œ¥}
       {- $\inferMedium$ -}
    ‚Üí  Œì at t ‚Äî‚Üí SUBT Œì at (t + Œ¥)

  Timeout : ‚àÄ {Œì Œì‚Ä≤ t i contract}
    ‚Üí  All (U ‚â§ t) (timeDecorations (contract ‚Äº i))  -- all time constraints are satisfied
    ‚Üí  ‚ü® [ contract ‚Äº i ] , v ‚ü© SUPCC | Œì ‚Äî‚Üí Œì‚Ä≤          -- resulting state if we pick this branch
       {- $\inferMedium$ -}
    ‚Üí  (‚ü® contract , v ‚ü© SUPCC | Œì) at t ‚Äî‚Üí SUBT Œì‚Ä≤ at t
\end{code}\end{agda}

Having defined the step relation in this way allows for equational reasoning, a powerful tool for
writing complex proofs:
\begin{agda}\begin{code}
data U ‚Äî‚Ü† U : Configuration ads cs ds ‚Üí Configuration ads‚Ä≤ cs‚Ä≤ ds‚Ä≤ ‚Üí Set where

  U ‚àé : (M : Configuration ads cs ds) ‚Üí M ‚Äî‚Ü† M

  U ‚Äî‚Üí ‚ü® U ‚ü© U : ‚àÄ {M  N} (L : Configuration ads cs ds)
    ‚Üí  L ‚Äî‚Üí M ‚Üí M ‚Äî‚Ü† N
       {- $\inferMedium$ -}
    ‚Üí  L ‚Äî‚Ü† N

begin U : ‚àÄ {M N} ‚Üí M ‚Äî‚Ü† N ‚Üí M ‚Äî‚Ü† N
\end{code}\end{agda}

\subsection{Example}
We are finally ready to see a more intuitive example of the \textit{timed-commitment protocol}, where a participant
commits to revealing a valid secret $a$ (e.g. "qwerty") to another participant,
but loses her deposit of \bitcoin ~1 if she does not meet a certain deadline $t$:
\begin{agda}\begin{code}
tc : Advertisement 1 [] (1 ‚à∑ 0 ‚à∑ [])
tc =  ‚ü® A ! 1 ‚àß A ‚ôØ a ‚àß B ! 0 ‚ü© ^^ reveal [ a ] ‚áí withdraw A ‚à∂- DOTS ^^ ‚äï ^^ after t ‚à∂ withdraw B
\end{code}\end{agda}

Below is one possible reduction in the bottom layer of our small-step semantics, demonstrating the case where
the participant actually meets the deadline:
\begin{agda}\begin{code}
tc-semantics : ‚ü® A , 1 ‚ü© SUPD ‚Äî‚Ü† ‚ü® A , 1 ‚ü© SUPD | A ‚à∂ a ‚ôØ 6
tc-semantics =
  begin
    ‚ü® A , 1 ‚ü© SUPD
  ‚Äî‚Üí‚ü® C-Advertise ‚ü©
    ` tc | ‚ü® A , 1 ‚ü© SUPD
  ‚Äî‚Üí‚ü® C-AuthCommit ‚ü©
    ` tc | ‚ü® A , 1 ‚ü© SUPD | ‚ü®A ‚à∂ a ‚ôØ 6‚ü© | A [ HTRI tc ]
  ‚Äî‚Üí‚ü® C-AuthInit ‚ü©
    ` tc | ‚ü® A , 1 ‚ü© SUPD | ‚ü®A ‚à∂ a ‚ôØ 6‚ü© | A [ HTRI tc ] | A [ tc STRI 0 ]
  ‚Äî‚Üí‚ü® C-Init ‚ü©
    ‚ü® tc , 1 ‚ü© SUPCC | ‚ü® A ‚à∂ a ‚ôØ inj‚ÇÅ 6 ‚ü©
  ‚Äî‚Üí‚ü® C-AuthRev ‚ü©
    ‚ü® tc , 1 ‚ü© SUPCC | A ‚à∂ a ‚ôØ 6
  ‚Äî‚Üí‚ü® C-Control ‚ü©
    ‚ü® [ reveal [ a ] ‚áí withdraw A ‚à∂- DOTS ] , 1 ‚ü© SUPCC | A ‚à∂ a ‚ôØ 6
  ‚Äî‚Üí‚ü® C-PutRev ‚ü©
    ‚ü® [ withdraw A ] , 1 ‚ü© SUPCC | A ‚à∂ a ‚ôØ 6
  ‚Äî‚Üí‚ü® C-Withdraw ‚ü©
    ‚ü® A , 1 ‚ü© SUPD | A ‚à∂ a ‚ôØ 6
  ‚àé
\end{code}\end{agda}
At first, |A| holds a deposit of \bitcoin ~1, as required by the contract's precondition.
Then, the contract is advertised and the participants slowly provide the corresponding prerequisites
(i.e. |A| commits to a secret via |C-AuthCommit| and spends the required deposit via |C-AuthInit|,
while |B| does not do anything).
After all pre-conditions have been satisfied, the contract is stipulated (rule |C-Init|) and the secret is successfully
revealed (rule |C-AuthRev|).
Finally, the first branch is picked (rule |C-Control|) and |A| retrieves her deposit back
(rules |C-PutRev| and |C-Withdraw|).

\subsection{Reasoning Modulo Permutation}
In the definitions above, we have assumed that |(UL BAR UR , ‚àÖ)| forms a commutative monoid, which allowed us
to always present the required sub-configuration individually on the far left of a composite configuration.
While such definitions enjoy a striking similarity to the ones appearing in the original paper~\cite{bitml}
(and should always be preferred in an informal textual setting),
this approach does not suffice for a mechanized account of the model.
After all, this explicit treatment of all intuitive assumptions/details is what makes our approach robust and will lead to
a deeper understanding of how these systems behave.
To overcome this intricacy, we introduce an \textit{equivalence relation} on configurations, which holds when
they are just permutations of one another:
\begin{agda}\begin{code}
U ‚âà U : Configuration ads cs ds ‚Üí Configuration ads cs ds ‚Üí Set
c ‚âà c‚Ä≤ = cfgToList c ‚Ü≠ cfgToList c‚Ä≤
  where
    open import Data.List.Permutation using (U ‚Ü≠ U)

    cfgToList : Configuration‚Ä≤ p‚ÇÅ p‚ÇÇ p‚ÇÉ ‚Üí List (‚àÉ[ p‚ÇÅ ] ^^ ‚àÉ[ p‚ÇÇ ] ^^ ‚àÉ[ p‚ÇÉ ] ^^ Configuration‚Ä≤ p‚ÇÅ p‚ÇÇ p‚ÇÉ)
    cfgToList  ‚àÖ                 = []
    cfgToList  (l | r)           = cfgToList l ++ cfgToList r
    cfgToList  {p‚ÇÅ} {p‚ÇÇ} {p‚ÇÉ} c  = [ p‚ÇÅ , p‚ÇÇ , p‚ÇÉ , c ]
\end{code}\end{agda}
Given this reordering mechanism, we now need to generalise all our inference rules to implicitly
reorder the current and next configuration of the step relation.
We achieve this by introducing a new variable for each of the operands of the resulting step relations,
replacing the operands with these variables and requiring that they are
re-orderings of the previous configurations, as shown in the following generalisation of the |DEP-AuthJoin| rule\footnote{
In fact, it is not necessary to reorder both ends for the step relation; at least one would be adequate.
}:
\begin{agda}\begin{code}
  DEP-AuthJoin :
       Œì‚Ä≤ ‚âà ‚ü® A , v ‚ü© SUPD | ‚ü® A , v‚Ä≤ ‚ü© SUPD | Œì                ^^  ‚àà Configuration ads cs (A has v ‚à∑ A has v‚Ä≤ ‚à∑ ds)
    ‚Üí  Œì‚Ä≥ ‚âà ‚ü® A , v ‚ü© SUPD | ‚ü® A , v‚Ä≤ ‚ü© SUPD | A [ 0 ‚Üî 1 ] | Œì  ^^  ‚àà Configuration ads cs (A has (v + v‚Ä≤) ‚à∑ ds)
       {- $\inferMedium$ -}
    ‚Üí  Œì‚Ä≤ ‚Äî‚Üí Œì‚Ä≥
\end{code}\end{agda}

Unfortunately, we now have more proof obligations of the re-ordering relation lying around, which makes reasoning about
our semantics rather tedious. We are currently investigating different techniques to model such reasoning up to equivalence:
\begin{itemize}
\item \textit{Quotient types}~\cite{quotient} allow equipping a type with an equivalence relation.
If we assume the axiom that two elements of the underlying type are \textit{propositionally} equal when they are equivalent,
we could discharge our current proof burden trivially by reflexivity.
Unfortunately, while one can easily define \textit{setoids} in Agda, there is not enough support from the underlying type system to make reasoning about such an equivalence as easy as with built-in equality.
\item Going a step further into more advanced notions of equality, we arrive at \textit{homotopy type theory}~\cite{homotopy},
which tries to bridge the gap between reasoning about isomorphic objects in informal pen-paper proofs
and the way we achieve this in mechanized formal methods.
Again, realizing practical systems with such an enriched theory is a topic of current research~\cite{cubical} and no mature implementation exists yet, so we cannot integrate it with our current development in any pragmatic way.
\item The crucial problems we have encountered so far are attributed to the non-deterministic nature of BitML, which is actually
inherent in any process calculus. Building upon this idea, we plan to take a step back and investigate different reasoning
techniques for a minimal process calculus. Once we have an approach that is more suitable, we will incorporate it
in our full-blown BitML calculus.
\end{itemize}

\subsection{Symbolic Model}
In order to formalize the BitML's symbolic model, we first notice that a constructed derivation
witnesses one of many possible contract executions.
In other words, derivations of our small-step semantics model \textit{traces} of the contract execution.
Our symbolic model will provide a game-theoretic view over those traces, where each participant has a certain
\textit{strategy} that selects moves depending on the current trace of previous moves.
Moves here should be understood just as emissions of a label, i.e. application of a certain inference rule.

\subsubsection{Labelled Step Relation}
To that end, we associate a label to each inference rule and
extend the original step relation to additionally emit labels,
hence defining a \textit{labelled transition system}.

We first define the set of labels, which basically distinguish which rule was used,
along with all (non-proof) arguments that are required by the rule:
\begin{agda}\begin{code}
data Label : Set where
##
  auth-join[ _ , _ ‚Üî _ ] : Participant ‚Üí  DepositIndex ‚Üí DepositIndex ‚Üí Label
  join[ _ ‚Üî _ ] :                         DepositIndex ‚Üí DepositIndex ‚Üí Label
##
  auth-divide[ _ , _ ‚ñ∑ _ , _ ] : Participant ‚Üí  DepositIndex ‚Üí Value ‚Üí Value ‚Üí Label
  divide[ _ ‚ñ∑ _ , _ ] :                         DepositIndex ‚Üí Value ‚Üí Value ‚Üí Label
##
  auth-donate[ _ , _ ‚ñ∑ SD _ ] : Participant ‚Üí  DepositIndex ‚Üí Participant ‚Üí Label
  donate[ _ ‚ñ∑ SD _ ] :                         DepositIndex ‚Üí Participant ‚Üí Label
##
  auth-destroy[ _ , _ ] : Participant ‚Üí DepositIndex ‚Üí Label
  destroy[ _ ] :                              DepositIndex ‚Üí Label
##
  advertise[ _ ] : ‚àÉAdvertisement ‚Üí Label
##
  auth-commit[ _ , _ , _ ] : Participant ‚Üí ‚àÉAdvertisement ‚Üí List CommittedSecret ‚Üí Label
  auth-init[ _ , _ , _ ] : Participant ‚Üí ‚àÉAdvertisement ‚Üí DepositIndex ‚Üí Label
  init[ _ ] : ‚àÉAdvertisement ‚Üí Label
##
  split : Label
##
  auth-rev[ _ , _ ] : Participant ‚Üí Secret ‚Üí Label
  rev[ _ , _ ] : Values ‚Üí Secrets ‚Üí Label
##
  withdraw[ _ , _ ] : Participant ‚Üí Value ‚Üí Label
##
  auth-control[ _ , _ ‚ñ∑ SB _] : Participant ‚Üí (c : ‚àÉContracts) ‚Üí Index (proj‚ÇÇ (proj‚ÇÇ c)) ‚Üí Label
  control : Label
##
  delay[ _ ] : Time ‚Üí Label
\end{code}\end{agda}
Notice how we existentially pack indexed types, so that |Label| remains simply-typed.
This is essential, as it would be tedious to manipulate indices when there is no need for them.
Moreover, some indices are now just |‚Ñï| instead of |Fin|, losing the guarantee to not fall out-of-bounds.

The step relation will now emit the corresponding label for each rule. Below, we give
the updated kind signature and an example for the |DEP-AuthJoin| rule:
\begin{agda}\begin{code}
data _ ‚Äî‚Üí[ _ ] _  :  Configuration ads cs ds
                  ‚Üí  Label
                  ‚Üí  Configuration ads‚Ä≤ cs‚Ä≤ ds‚Ä≤
                  ‚Üí  Set where
  VDOTS
  DEP-AuthJoin :
    ‚ü® A , v ‚ü© SUPD | ‚ü® A , v‚Ä≤ ‚ü© SUPD | Œì
  ‚Äî‚Üí[ auth-join[ A , 0 ‚Üî 1 ] ]
    ‚ü® A , v ‚ü© SUPD | ‚ü® A , v‚Ä≤ ‚ü© SUPD | A [ 0 ‚Üî 1 ] | Œì
  VDOTS
\end{code}\end{agda}

Naturally, the reflexive transitive closure of the augmented step relation will now hold a sequence of labels as well:
\begin{agda}\begin{code}
data _ ‚Äî‚Ü†‚ü¶ _ ‚üß _  :  Configuration ads cs ds
                  ‚Üí  Labels
                  ‚Üí  Configuration ads‚Ä≤ cs‚Ä≤ ds‚Ä≤
                  ‚Üí  Set where
##
  _ ‚àé‚àé  : (M : Configuration ads cs ds)

       {- \inferLine{3cm} -}
    ‚Üí  M ‚Äî‚Ü†‚ü¶ [] ‚üß M
##
  _ ‚Äî‚Üí‚ü® _ ‚ü© _ ‚ä¢ _ :  (L : Configuration ads cs ds) {L‚Ä≤ : Configuration ads cs ds}
                     {M M‚Ä≤ : Configuration ads‚Ä≤ cs‚Ä≤ ds‚Ä≤} {N : Configuration ads‚Ä≥ cs‚Ä≥ ds‚Ä≥}

    ‚Üí  L‚Ä≤ ‚Äî‚Üí‚ü¶ a ‚üß M‚Ä≤
    ‚Üí  (L ‚âà L‚Ä≤) √ó (M ‚âà M‚Ä≤)
    ‚Üí  M ‚Äî‚Ü†‚ü¶ as ‚üß  N
       {- \inferLine{8cm} -}
    ‚Üí  L ‚Äî‚Ü†‚ü¶ a ‚à∑ as ‚üß N
##
start_ : {M : Configuration ads cs ds} {N : Configuration ads‚Ä≤ cs‚Ä≤ ds‚Ä≤}

  ‚Üí  M ‚Äî‚Ü†‚ü¶ as ‚üß N
     {- \inferLine{3cm} -}
  ‚Üí  M ‚Äî‚Ü†‚ü¶ as ‚üß N

start M‚Äî‚Ü†N = M‚Äî‚Ü†N
\end{code}\end{agda}
The timed variants of the step relation follow exactly the same procedure, so we do not repeat the definitions here.

\subsubsection{Traces}
Values of type |_ ‚Äî‚Ü†[ _ ] _| model execution traces.
Since the complex type indices of the step-relation datatype is not as useful here,
we define a simpler datatype of execution traces that is a list of labelled transitions
between (existentially-packed) timed configurations:
\begin{agda}\begin{code}
data Trace : Set where
  _ ‚àô : ‚àÉTimedConfiguration ‚Üí Trace
##
  _ ‚à∑‚ü¶ _ ‚üß _ : ‚àÉTimedConfiguration ‚Üí Label ‚Üí Trace ‚Üí Trace
\end{code}\end{agda}

\paragraph{Stripping}
Strategies will make moves based on these traces,
so we need a \textit{stripping} operation that traverses a configuration with its emitted labels
and removes any sensitive information (i.e. committed secrets):
\begin{agda}\begin{code}
stripCfg : Configuration‚Ä≤ p‚ÇÅ p‚ÇÇ p‚ÇÉ ‚Üí Configuration‚Ä≤ p‚ÇÅ p‚ÇÇ p‚ÇÉ
stripCfg ‚ü® p ‚à∂ a ‚ôØ _ ‚ü©  =  ‚ü® p ‚à∂ a ‚ôØ nothing ‚ü©
stripCfg (l | r ‚à∂- p)   =  stripCfg l | stripCfg r ‚à∂- p
stripCfg c              =  c

stripLabel : Label ‚Üí Label
stripLabel auth-commit[ p , ad , _ ] = auth-commit[ p , ad , [] ]
stripLabel a = a

_‚àó : Trace ‚Üí Trace
(DOTS , Œì at t) ‚àó          = (DOTS , stripCfg Œì at t)
(DOTS , Œì at t) ‚à∑‚ü¶ Œ± ‚üß ts  = (DOTS , stripCfg Œì at t) ‚à∑‚ü¶ stripLabel Œ± ‚üß (ts ‚àó)
\end{code}\end{agda}

\subsubsection{Strategies}
\textit{Participant strategies} are functions which, given the (stripped) trace so far, pick
a set of possible next moves for its participant.
These moves cannot be arbitrary; they have to satisfy several validity conditions which
we require as proof in the datatype definition itself.

Strategies are expected to be PPTIME algorithms, so as to have a certain computational bound
on the processing they can undergo to compute secrets, etc.
Since working on a resource-aware logic would make this much more difficult in search of tooling
and infrastructure, we ignore this requirement and simply model strategies as regular functions.

Before we define the types of strategies, we give a convenient notation to extend a trace
with another (timed) transition:
\begin{agda}\begin{code}
_ ‚Äî‚Äî‚Üí[ _ ] _ : Trace ‚Üí Label ‚Üí ‚àÉTimedConfiguration ‚Üí Set
R ‚Äî‚Äî‚Üí[ Œ± ] (_ , _ , _ , tc‚Ä≤)
  = proj‚ÇÇ (proj‚ÇÇ (proj‚ÇÇ (lastCfg R))) ‚Äî‚Üí[ Œ± ] tc‚Ä≤
\end{code}\end{agda}

\paragraph{Honest strategies}
Each honest participant is modelled by a symbolic strategy that outputs a set of possible next
moves with respect to the current trace. These moves have to be \textit{valid}, thus we define
\textit{honest strategies} as a dependent record:
\begin{agda}\begin{code}
record HonestStrategy (A : Participant) : Set where
  field
    strategy  :  Trace ‚Üí Labels

    valid     :  A ‚àà Hon                                                                         {- (1) -}
              √ó  (‚àÄ {R : Trace} {Œ± : Label} ‚Üí Œ± ‚àà strategy (R ‚àó) ‚Üí                               {- (2) -}
                   ‚àÉ[ R‚Ä≤ ] (R ‚Äî‚Äî‚Üí[ Œ± ] R‚Ä≤))
              √ó  (‚àÄ {R : Trace} {Œ± : Label} ‚Üí Œ± ‚àà strategy (R ‚àó) ‚Üí                               {- (3) -}
                   All‚Çò (_‚â° A) (authDecoration Œ±))
                 -- coherent secret lengths
              √ó  (‚àÄ {R : Trace} {Œî Œî‚Ä≤ : List CommittedSecret} {ad : ‚àÉAdvertisement} ‚Üí            {- (4) -}
                   auth-commit[ A , ad , Œî  ] ‚àà strategy (R ‚àó) ‚Üí
                   auth-commit[ A , ad , Œî‚Ä≤ ] ‚àà strategy (R ‚àó) ‚Üí
                     Œî ‚â° Œî‚Ä≤)
              √ó  (‚àÄ {R : Trace} {T‚Ä≤ : ‚àÉTimedConfiguration} {Œ± : Label} ‚Üí Œ± ‚àà strategy (R ‚àó) ‚Üí    {- (5) -}
                   ‚àÉ[ Œ±‚Ä≤ ] (R ‚Äî‚Äî‚Üí[ Œ±‚Ä≤ ] T‚Ä≤) ‚Üí
                   ‚àÉ[ R‚Ä≥ ] (T‚Ä≤ ‚à∑‚ü¶ Œ± ‚üß R ‚Äî‚Äî‚Üí[ Œ± ] R‚Ä≥) ‚Üí
                     Œ± ‚àà strategy ((T‚Ä≤ ‚à∑‚ü¶ Œ± ‚üß R) ‚àó))
\end{code}\end{agda}
Condition $(1)$ restricts our participants to the honest subset\footnote{
Recall that |Hon| is non-empty, i.e. there is always at least one honest participant.
} and condition $(2)$ requires that chosen moves are in accordance to the small-step semantics of BitML.
Condition $(3)$ states that one cannot authorize moves for other participants,
condition $(4)$ requires that the lengths of committed secrets are \textit{coherent}
(i.e. no different lengths for the same secrets across moves) and
condition $(5)$ dictates that decisions are \textit{consistent}, so as moves that are not chosen will still be
selected by the strategy in a future run (if they are still valid).

All honest participants should be accompanied by such a strategy,
so we pack all honest strategies in one single datatype:
\begin{agda}\begin{code}
HonestStrategies : Set
HonestStrategies = ‚àÄ {A} ‚Üí A ‚àà Hon ‚Üí ParticipantStrategy A
\end{code}\end{agda}

\paragraph{Adversary strategies}
All dishonest participant will be modelled by a single adversary |Adv|, whose strategy now additionally
takes the moves chosen by the honest participants and makes the final decision.

Naturally, the chosen move is subject to certain conditions and is again a dependent record:
\begin{agda}\begin{code}
record AdversarialStrategy (Adv : Participant) : Set where
  field
    strategy  :  Trace ‚Üí List (Participant √ó Labels) ‚Üí Label

    valid     :  Adv ‚àâ Hon                                                {- (1) -}
              √ó  (‚àÄ {B ad Œî} ‚Üí B ‚àâ Hon ‚Üí Œ± ‚â° auth-commit[ B , ad , Œî ] ‚Üí  {- (2) -}
                   Œ± ‚â° strategy (R ‚àó) [])
              √ó  ‚àÄ {R : Trace} {moves : List (Participant √ó Labels)} ‚Üí    {- (3) -}
                  let Œ± = strategy (R ‚àó) moves in
                  (  ‚àÉ[ A ]
                       (  A ‚àà Hon
                       √ó  authDecoration Œ± ‚â° just A
                       √ó  Œ± ‚àà concatMap proj‚ÇÇ moves )
                  ‚äé  (  authDecoration Œ± ‚â° nothing
                     √ó  (‚àÄ Œ¥ ‚Üí Œ± ‚â¢ delay[ Œ¥ ])
                     √ó  ‚àÉ[ R‚Ä≤ ] (R ‚Äî‚Äî‚Üí[ Œ± ] R‚Ä≤) )
                  ‚äé  (‚àÉ[ B ]
                        (  (authDecoration Œ± ‚â° just B)
                        √ó  (B ‚àâ Hon)
                        √ó  (‚àÄ s ‚Üí Œ± ‚â¢ auth-rev[ B , s ])
                        √ó  ‚àÉ[ R‚Ä≤ ] (R ‚Äî‚Äî‚Üí[ Œ± ] R‚Ä≤) ))
                  ‚äé  ‚àÉ[ Œ¥ ]
                       (  (Œ± ‚â° delay[ Œ¥ ])
                       √ó  All (Œª{ (_ , Œõ) ‚Üí  (Œõ ‚â° []) ‚äé  Any (Œª{ delay[ Œ¥‚Ä≤ ] ‚Üí Œ¥‚Ä≤ ‚â• Œ¥ ; _ ‚Üí ‚ä• }) Œõ}) moves )
                  ‚äé  ‚àÉ[ B ] ‚àÉ[ s ]
                       (  Œ± ‚â° auth-rev[ B , s ]
                       √ó  B ‚àâ Hon
                       √ó  ‚ü® B ‚à∂ s ‚ôØ nothing ‚ü© ‚àà (R ‚àó)
                       √ó  ‚àÉ[ R‚àó‚Ä≤ ] ‚àÉ[ Œî ] ‚àÉ[ ad ]
                            (  R‚àó‚Ä≤ ‚àà prefixTraces (R ‚àó)
                            √ó  strategy R‚àó‚Ä≤ [] ‚â° auth-commit[ B , ad , Œî ]
                            √ó  (s , nothing) ‚àà Œî )))
\end{code}\end{agda}
The first two conditions state that the adversary is not one of the honest participants
and that committing cannot depend on the honest moves, respectively.
The third condition constraints the move that is chosen by the adversary, such that
one of the following conditions hold:
\begin{enumerate}
\item The move was chosen out of the available honest moves.
\item It is not a |delay|, nor does it require any authorization.
\item It is authorized by a dishonest participant, but is not a secret-revealing move.
\item It is a |delay|, but one that does not influence the time constraints of the honest participants.
\item It reveals a secret from a dishonest participant, in which case there is valid commit (i.e. with non-|‚ä•| length)
somewhere in the previous trace.
\end{enumerate}

\paragraph{Symbolic Conformance}
...

\subsubsection{Meta-theoretical results}
\paragraph{Stripping preserves semantics}
...
\paragraph{Adversial moves are always semantic}
one of the following should hold:
...

\subsection{BitML Paper Fixes}
... formal verification benefits ...

\subsubsection{[DEP-Join]}
\TODO{why symmetric?}

\subsubsection{[C-AuthRev]}
\TODO{missing |DOTS Œì|}

\subsubsection{[C-Control]}
\TODO{Refactor to allow for ``linear'' equational reasoning}

\subsubsection{Adversarial Strategy}
\TODO{No need for Œª = (Aj,j)}

\subsubsection{Stripping premises}
\TODO{Not only AuthRev, but also AuthCommit}
